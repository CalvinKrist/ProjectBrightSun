{"version":3,"sources":["../src/log.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;AAGA,IAAI,UAA8C,IAAlD;AAEO,MAAM,QAAQ,qBAAO,kBAAP,CAAd;;;AAMD,SAAU,UAAV,CAAqB,KAArB,EAA8D;AAClE,YAAU,KAAV;AACD;;AAIM,MAAM,UAAU,CAAhB;;;AAED,MAAO,MAAP,CAAa;AACjB,cAA+B,MAA/B,EAAqD;AAAtB,SAAA,MAAA,GAAA,MAAA;;AAG/B,SAAA,kBAAA,GAAqE,MAAM,EAA3E;AAFC;;AAID,WAAS,IAAT,EAAqB;AACnB,UAAM,MAAM,QAAQ,GAAR,EAAZ;AACA,WAAO,KAAK,UAAL,CAAgB,GAAhB,IAAuB,KAAK,SAAL,CAAe,IAAI,MAAJ,GAAa,CAA5B,CAAvB,GAAwD,IAA/D;AACD,GATgB,CAWjB;;;AACA,MAAI,cAAJ,GAAkB;AAChB,WAAO,MAAM,OAAb;AACD;;AAED,OAAK,eAAL,EAA8C,OAA9C,EAA8D;AAC5D,SAAK,KAAL,CAAW,OAAX,EAAoB,eAApB,EAAqC,MAArC;AACD;;AAED,SAAO,eAAP,EAAgD,OAAhD,EAAgE;AAC9D,SAAK,KAAL,CAAW,OAAX,EAAoB,eAApB,EAAqC,QAArC;AACD;;AAED,OAAK,eAAL,EAA8C,OAA9C,EAA8D;AAC5D,SAAK,KAAL,CAAW,OAAX,EAAoB,eAApB,EAAqC,MAArC;AACD;;AAED,QAAM,MAAN,EAA6B,OAA7B,EAA4C;AAC1C,QAAI,MAAM,OAAV,EAAmB;AACjB,WAAK,MAAL,CAAY,OAAZ,EAAqB,MAArB,EAA6B,OAA7B;AACD;AACF;;AAEO,QAAM,OAAN,EAA2C,eAA3C,EAAoF,KAApF,EAAmG;AACzG,QAAI,YAAY,SAAhB,EAA2B;AACzB,WAAK,MAAL,CAAY,eAAZ,EAAuC,IAAvC,EAA6C,KAA7C;AACD,KAFD,MAGK;AACH,WAAK,MAAL,CAAY,OAAZ,EAAqB,eAArB,EAAuD,KAAvD;AACD;AACF;;AAEO,SAAO,OAAP,EAAgC,MAAhC,EAAuD,KAAvD,EAAsE;AAC5E;AACA,QAAI,mBAAmB,KAAvB,EAA8B;AAC5B,gBAAU,QAAQ,KAAR,IAAiB,QAAQ,QAAR,EAA3B;AACD,KAFD,MAGK;AACH,gBAAU,QAAQ,QAAR,EAAV;AACD;;AAED,UAAM,iBAAiB,GAAvB;AACA,UAAM,QAAQ,eAAe,KAAf,CAAd;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAmB,GAAG,MAAM,cAAN,CAAqB,GAAhE;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,OAAO,aAAP,CAAqB,KAAK,kBAAL,CAAwB,OAAxB,EAAiC,KAAjC,CAArB,EAA8D,MAA9D,EAAsE,KAAtE,EAA6E,KAA7E,EAAoF,UAAU;AAAE;AAAhG,KAAlB;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB;AACD;;AAED,SAAO,aAAP,CAAqB,OAArB,EAAsC,MAAtC,EAA6D,KAA7D,EAA8E,KAA9E,EAA6G,iBAAiB,CAA9H,EAA+H;AAC7H,QAAI,UAAU,IAAd,EAAoB;AAClB,aAAO,OAAP;AACD;;AAED,QAAI,OAAO,OAAX;AAEA,UAAM,eAAe,IAAI,MAAJ,CAAW,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,QAAQ,MAAzB,CAAX,CAArB;AACA,YAAQ,YAAR;AAEA,UAAM,aAAa,OAAO,IAAP,CAAY,MAAZ,CAAnB;AACA,QAAI,UAAU,CAAd;;AACA,SAAK,MAAM,IAAX,IAAmB,UAAnB,EAA+B;AAC7B,UAAI,aAAa,OAAO,IAAP,CAAjB;AACA,UAAI,eAA8B,IAAlC;;AACA,UAAI,cAAc,IAAd,IAAsB,OAAO,UAAP,KAAsB,QAA5C,IAAwD,WAAW,QAAX,CAAoB,IAApB,CAA5D,EAAuF;AACrF,uBAAe,IAAI,MAAJ,CAAW,iBAAiB,QAAQ,MAAzB,GAAkC,aAAa,MAA/C,GAAwD,CAAnE,CAAf;AACA,qBAAa,OAAO,YAAP,GAAsB,WAAW,OAAX,CAAmB,KAAnB,EAA0B,KAAK,YAAY,EAA3C,CAAnC;AACD,OAHD,MAIK,IAAI,MAAM,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAClC,qBAAa,KAAK,SAAL,CAAe,UAAf,CAAb;AACD,OAFI,MAGA,IAAI,MAAM,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAClC,qBAAa,KAAK,SAAL,CAAe,UAAf,CAAb;AACD,OAFI,MAGA,IAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC,CACvC;AACD;;AAED,cAAQ,GAAG,MAAM,IAAN,CAAW,IAAI,UAAU,EAApC;;AACA,UAAI,EAAE,OAAF,KAAc,WAAW,MAA7B,EAAqC;AACnC,YAAI,gBAAgB,IAApB,EAA0B;AACxB,kBAAQ,GAAR;AACD,SAFD,MAGK;AACH,kBAAQ,OAAO,YAAf;AACD;AACF;AACF;;AACD,WAAO,IAAP;AACD;;AAED,MAAI,OAAJ,EAAmB;AACjB,QAAI,WAAW,IAAf,EAAqB;AACnB,WAAK,MAAL,CAAY,KAAZ,CAAkB,GAAG,OAAO,IAA5B;AACD,KAFD,MAGK;AACH,cAAQ,OAAR;AACD;AACF;;AA5GgB;;;AA+GnB,MAAM,iBAA6C;AACjD,QAAM,iBAAM,IADqC;AAEjD,UAAQ,iBAAM,MAFmC;AAGjD,QAAM,iBAAM,MAHqC;AAIjD,SAAO,iBAAM;AAJoC,CAAnD;AAOO,MAAM,MAAM,IAAI,MAAJ,CAAW,QAAQ,MAAnB,CAAZ,C","sourcesContent":["import chalk, { Chalk } from \"chalk\"\nimport _debug from \"debug\"\nimport WritableStream = NodeJS.WritableStream\n\nlet printer: ((message: string) => void) | null = null\n\nexport const debug = _debug(\"electron-builder\")\n\nexport interface Fields {\n  [index: string]: any\n}\n\nexport function setPrinter(value: ((message: string) => void) | null) {\n  printer = value\n}\n\nexport type LogLevel = \"info\" | \"warn\" | \"debug\" | \"notice\" | \"error\"\n\nexport const PADDING = 2\n\nexport class Logger {\n  constructor(protected readonly stream: WritableStream) {\n  }\n\n  messageTransformer: ((message: string, level: LogLevel) => string) = it => it\n\n  filePath(file: string) {\n    const cwd = process.cwd()\n    return file.startsWith(cwd) ? file.substring(cwd.length + 1) : file\n  }\n\n  // noinspection JSMethodCanBeStatic\n  get isDebugEnabled() {\n    return debug.enabled\n  }\n\n  info(messageOrFields: Fields | null | string, message?: string) {\n    this.doLog(message, messageOrFields, \"info\")\n  }\n\n  notice(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"notice\")\n  }\n\n  warn(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"warn\")\n  }\n\n  debug(fields: Fields | null, message: string) {\n    if (debug.enabled) {\n      this._doLog(message, fields, \"debug\")\n    }\n  }\n\n  private doLog(message: string | undefined | Error, messageOrFields: Fields | null | string, level: LogLevel) {\n    if (message === undefined) {\n      this._doLog(messageOrFields as string, null, level)\n    }\n    else {\n      this._doLog(message, messageOrFields as Fields | null, level)\n    }\n  }\n\n  private _doLog(message: string | Error, fields: Fields | null, level: LogLevel) {\n    // noinspection SuspiciousInstanceOfGuard\n    if (message instanceof Error) {\n      message = message.stack || message.toString()\n    }\n    else {\n      message = message.toString()\n    }\n\n    const levelIndicator = \"â€¢\"\n    const color = LEVEL_TO_COLOR[level]\n    this.stream.write(`${\" \".repeat(PADDING)}${color(levelIndicator)} `)\n    this.stream.write(Logger.createMessage(this.messageTransformer(message, level), fields, level, color, PADDING + 2 /* level indicator and space */))\n    this.stream.write(\"\\n\")\n  }\n\n  static createMessage(message: string, fields: Fields | null, level: LogLevel, color: (it: string) => string, messagePadding = 0): string {\n    if (fields == null) {\n      return message\n    }\n\n    let text = message\n\n    const fieldPadding = \" \".repeat(Math.max(1, 16 - message.length))\n    text += fieldPadding\n\n    const fieldNames = Object.keys(fields)\n    let counter = 0\n    for (const name of fieldNames) {\n      let fieldValue = fields[name]\n      let valuePadding: string | null = null\n      if (fieldValue != null && typeof fieldValue === \"string\" && fieldValue.includes(\"\\n\")) {\n        valuePadding = \" \".repeat(messagePadding + message.length + fieldPadding.length + 2)\n        fieldValue = \"\\n\" + valuePadding + fieldValue.replace(/\\n/g, `\\n${valuePadding}`)\n      }\n      else if (Array.isArray(fieldValue)) {\n        fieldValue = JSON.stringify(fieldValue)\n      }\n      else if (Array.isArray(fieldValue)) {\n        fieldValue = JSON.stringify(fieldValue)\n      }\n      else if (typeof fieldValue === \"object\") {\n        // fieldValue = safeStringifyJson(fieldValue)\n      }\n\n      text += `${color(name)}=${fieldValue}`\n      if (++counter !== fieldNames.length) {\n        if (valuePadding == null) {\n          text += \" \"\n        }\n        else {\n          text += \"\\n\" + valuePadding\n        }\n      }\n    }\n    return text\n  }\n\n  log(message: string): void {\n    if (printer == null) {\n      this.stream.write(`${message}\\n`)\n    }\n    else {\n      printer(message)\n    }\n  }\n}\n\nconst LEVEL_TO_COLOR: { [index: string]: Chalk } = {\n  info: chalk.blue,\n  notice: chalk.yellow,\n  warn: chalk.yellow,\n  debug: chalk.white,\n}\n\nexport const log = new Logger(process.stdout)"],"sourceRoot":""}

{"version":3,"sources":["../src/arch.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAY,IAAZ;;;AAAA,CAAA,UAAY,IAAZ,EAAgB;AACd,OAAA,KAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AAAM,OAAA,KAAA,KAAA,IAAA,CAAA,IAAA,KAAA;AAAK,OAAA,KAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AAAQ,OAAA,KAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACpB,CAFD,EAAY,wBAAA,OAAI,EAAJ,CAAZ;;AAMM,SAAU,iBAAV,CAA4B,IAA5B,EAAsC;AAC1C,UAAQ,IAAR;AACE,SAAK,KAAK,GAAV;AACE,aAAO,OAAP;;AACF,SAAK,KAAK,IAAV;AACE,aAAO,MAAP;;AACF,SAAK,KAAK,MAAV;AACE,aAAO,QAAP;;AACF,SAAK,KAAK,KAAV;AACE,aAAO,OAAP;;AAEF;AACE,YAAM,IAAI,KAAJ,CAAU,oBAAoB,IAAI,EAAlC,CAAN;AAXJ;AAaD;;AAEK,SAAU,eAAV,GAAyB;AAC7B,SAAO,CAAC,KAAK,KAAK,IAAV,CAAD,EAAkB,KAAK,KAAK,GAAV,CAAlB,EAAkC,KAAK,KAAK,MAAV,CAAlC,EAAqD,KAAK,KAAK,KAAV,CAArD,CAAP;AACD;;AAEK,SAAU,aAAV,CAAwB,IAAxB,EAAkC;AACtC,SAAO,SAAS,KAAK,GAAd,GAAoB,EAApB,GAAyB,IAAI,KAAK,IAAL,CAAU,EAA9C;AACD;;AAEK,SAAU,cAAV,CAAyB,IAAzB,EAAqC;AACzC,UAAQ,IAAR;AACE,SAAK,KAAL;AACE,aAAO,KAAK,GAAZ;;AACF,SAAK,MAAL;AACE,aAAO,KAAK,IAAZ;;AACF,SAAK,OAAL;AACE,aAAO,KAAK,KAAZ;;AACF,SAAK,QAAL;AACE,aAAO,KAAK,MAAZ;;AAEF;AACE,YAAM,IAAI,KAAJ,CAAU,oBAAoB,IAAI,EAAlC,CAAN;AAXJ;AAaD,C","sourcesContent":["export enum Arch {\n  ia32, x64, armv7l, arm64\n}\n\nexport type ArchType = \"x64\" | \"ia32\" | \"armv7l\" | \"arm64\"\n\nexport function toLinuxArchString(arch: Arch): string {\n  switch (arch) {\n    case Arch.x64:\n      return \"amd64\"\n    case Arch.ia32:\n      return \"i386\"\n    case Arch.armv7l:\n      return \"armv7l\"\n    case Arch.arm64:\n      return \"arm64\"\n\n    default:\n      throw new Error(`Unsupported arch ${arch}`)\n  }\n}\n\nexport function getArchCliNames(): Array<string> {\n  return [Arch[Arch.ia32], Arch[Arch.x64], Arch[Arch.armv7l], Arch[Arch.arm64]]\n}\n\nexport function getArchSuffix(arch: Arch): string {\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\n}\n\nexport function archFromString(name: string): Arch {\n  switch (name) {\n    case \"x64\":\n      return Arch.x64\n    case \"ia32\":\n      return Arch.ia32\n    case \"arm64\":\n      return Arch.arm64\n    case \"armv7l\":\n      return Arch.armv7l\n\n    default:\n      throw new Error(`Unsupported arch ${name}`)\n  }\n}"],"sourceRoot":""}

{"version":3,"sources":["../src/DebugLogger.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAO,WAAP,CAAkB;AAGtB,cAAqB,YAAY,IAAjC,EAAqC;AAAhB,SAAA,SAAA,GAAA,SAAA;AAFZ,SAAA,IAAA,GAAY,EAAZ;AAGR;;AAED,MAAI,GAAJ,EAAiB,KAAjB,EAA2B;AACzB,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACD;;AAED,UAAM,WAAW,IAAI,KAAJ,CAAU,GAAV,CAAjB;AACA,QAAI,IAAI,KAAK,IAAb;AACA,QAAI,WAA0B,IAA9B;;AACA,SAAK,MAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,UAAI,MAAM,SAAS,SAAS,MAAT,GAAkB,CAA3B,CAAV,EAAyC;AACvC,mBAAW,CAAX;AACA;AACD,OAHD,MAIK;AACH,YAAI,EAAE,CAAF,KAAQ,IAAZ,EAAkB;AAChB,YAAE,CAAF,IAAO,OAAO,MAAP,CAAc,IAAd,CAAP;AACD,SAFD,MAGK,IAAI,OAAO,EAAE,CAAF,CAAP,KAAgB,QAApB,EAA8B;AACjC,YAAE,CAAF,IAAO,CAAC,EAAE,CAAF,CAAD,CAAP;AACD;;AACD,YAAI,EAAE,CAAF,CAAJ;AACD;AACF;;AAED,QAAI,MAAM,OAAN,CAAc,EAAE,QAAF,CAAd,CAAJ,EAAkC;AAChC,QAAE,QAAF,EAAc,IAAd,CAAmB,KAAnB;AACD,KAFD,MAGK;AACH,QAAE,QAAF,IAAgB,KAAhB;AACD;AACF;;AAED,OAAK,IAAL,EAAiB;AACf;AACA,QAAI,KAAK,SAAL,IAAkB,OAAO,IAAP,CAAY,KAAK,IAAjB,EAAuB,MAAvB,GAAgC,CAAtD,EAAyD;AACvD,aAAO,4BAAW,IAAX,EAAiB,6BAAgB,KAAK,IAArB,CAAjB,CAAP;AACD,KAFD,MAGK;AACH,aAAO,QAAQ,OAAR,EAAP;AACD;AACF;;AA9CqB,C","sourcesContent":["import { outputFile } from \"fs-extra-p\"\nimport { serializeToYaml } from \"./util\"\n\nexport class DebugLogger {\n  readonly data: any = {}\n\n  constructor(readonly isEnabled = true) {\n  }\n\n  add(key: string, value: any) {\n    if (!this.isEnabled) {\n      return\n    }\n\n    const dataPath = key.split(\".\")\n    let o = this.data\n    let lastName: string | null = null\n    for (const p of dataPath) {\n      if (p === dataPath[dataPath.length - 1]) {\n        lastName = p\n        break\n      }\n      else {\n        if (o[p] == null) {\n          o[p] = Object.create(null)\n        }\n        else if (typeof o[p] === \"string\") {\n          o[p] = [o[p]]\n        }\n        o = o[p]\n      }\n    }\n\n    if (Array.isArray(o[lastName!!])) {\n      o[lastName!!].push(value)\n    }\n    else {\n      o[lastName!!] = value\n    }\n  }\n\n  save(file: string) {\n    // toml and json doesn't correctly output multiline string as multiline\n    if (this.isEnabled && Object.keys(this.data).length > 0) {\n      return outputFile(file, serializeToYaml(this.data))\n    }\n    else {\n      return Promise.resolve()\n    }\n  }\n}"],"sourceRoot":""}

{"version":3,"sources":["../../src/targets/pkg.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, debug, exec, use } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { getNotLocalizedLicenseFile } from \"../util/license\"\nimport { readFile, unlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { build as buildPlist, parse as parsePlist } from \"plist\"\nimport { PkgOptions } from \"..\"\nimport { filterCFBundleIdentifier } from \"../appInfo\"\nimport { findIdentity, Identity } from \"../codeSign\"\nimport { Target } from \"../core\"\nimport MacPackager from \"../macPackager\"\n\nconst certType = \"Developer ID Installer\"\n\n// http://www.shanekirk.com/2013/10/creating-flat-packages-in-osx/\n// to use --scripts, we must build .app bundle separately using pkgbuild\n// productbuild --scripts doesn't work (because scripts in this case not added to our package)\n// https://github.com/electron-userland/electron-osx-sign/issues/96#issuecomment-274986942\nexport class PkgTarget extends Target {\n  readonly options: PkgOptions = {\n    allowAnywhere: true,\n    allowCurrentUserHome: true,\n    allowRootDirectory: true,\n    ...this.packager.config.pkg,\n  }\n\n  constructor(private readonly packager: MacPackager, readonly outDir: string) {\n    super(\"pkg\")\n  }\n\n  async build(appPath: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    const appInfo = packager.appInfo\n\n    const artifactName = packager.expandArtifactNamePattern(options, \"pkg\")\n    const artifactPath = path.join(this.outDir, artifactName)\n\n    this.logBuilding(\"pkg\", artifactPath, arch)\n\n    const keychainName = (await packager.codeSigningInfo.value).keychainName\n\n    const appOutDir = this.outDir\n    // https://developer.apple.com/library/content/documentation/DeveloperTools/Reference/DistributionDefinitionRef/Chapters/Distribution_XML_Ref.html\n    const distInfoFile = path.join(appOutDir, \"distribution.xml\")\n\n    const innerPackageFile = path.join(appOutDir, `${filterCFBundleIdentifier(appInfo.id)}.pkg`)\n    const componentPropertyListFile = path.join(appOutDir, `${filterCFBundleIdentifier(appInfo.id)}.plist`)\n    const identity = (await Promise.all([\n      findIdentity(certType, options.identity || packager.platformSpecificBuildOptions.identity, keychainName),\n      this.customizeDistributionConfiguration(distInfoFile, appPath),\n      this.buildComponentPackage(appPath, componentPropertyListFile, innerPackageFile),\n    ]))[0]\n\n    if (identity == null && packager.forceCodeSigning) {\n      throw new Error(`Cannot find valid \"${certType}\" to sign standalone installer, please see https://electron.build/code-signing`)\n    }\n\n    const args = prepareProductBuildArgs(identity, keychainName)\n    args.push(\"--distribution\", distInfoFile)\n    args.push(artifactPath)\n    use(options.productbuild, it => args.push(...it as any))\n    await exec(\"productbuild\", args, {\n      cwd: appOutDir,\n    })\n    await Promise.all([unlink(innerPackageFile), unlink(distInfoFile)])\n\n    packager.dispatchArtifactCreated(artifactPath, this, arch, packager.computeSafeArtifactName(artifactName, \"pkg\", arch))\n  }\n\n  private async customizeDistributionConfiguration(distInfoFile: string, appPath: string) {\n    await exec(\"productbuild\", [\"--synthesize\", \"--component\", appPath, distInfoFile], {\n      cwd: this.outDir,\n    })\n\n    const options = this.options\n    let distInfo = await readFile(distInfoFile, \"utf-8\")\n    const insertIndex = distInfo.lastIndexOf(\"</installer-gui-script>\")\n    distInfo = distInfo.substring(0, insertIndex) + `    <domains enable_anywhere=\"${options.allowAnywhere}\" enable_currentUserHome=\"${options.allowCurrentUserHome}\" enable_localSystem=\"${options.allowRootDirectory}\" />\\n` + distInfo.substring(insertIndex)\n\n    const license = await getNotLocalizedLicenseFile(options.license, this.packager)\n    if (license != null) {\n      distInfo = distInfo.substring(0, insertIndex) + `    <license file=\"${license}\"/>\\n` + distInfo.substring(insertIndex)\n    }\n\n    debug(distInfo)\n    await writeFile(distInfoFile, distInfo)\n  }\n\n  private async buildComponentPackage(appPath: string, propertyListOutputFile: string, packageOutputFile: string) {\n    const options = this.options\n    const rootPath = path.dirname(appPath)\n\n    // first produce a component plist template\n    await exec(\"pkgbuild\", [\n      \"--analyze\",\n      \"--root\", rootPath,\n      propertyListOutputFile,\n    ])\n\n    // process the template plist\n    const plistInfo = parsePlist(await readFile(propertyListOutputFile, \"utf8\"))\n    if (plistInfo.length > 0) {\n      const packageInfo = plistInfo[0]\n\n      // ChildBundles lists all of electron binaries within the .app.\n      // There is no particular reason for removing that key, except to be as close as possible to\n      // the PackageInfo generated by previous versions of electron-builder.\n      delete packageInfo.ChildBundles\n\n      if (options.isRelocatable != null) {\n        packageInfo.BundleIsRelocatable = options.isRelocatable\n      }\n\n      if (options.isVersionChecked != null) {\n        packageInfo.BundleIsVersionChecked = options.isVersionChecked\n      }\n\n      if (options.hasStrictIdentifier != null) {\n        packageInfo.BundleHasStrictIdentifier = options.hasStrictIdentifier\n      }\n\n      if (options.overwriteAction != null) {\n        packageInfo.BundleOverwriteAction = options.overwriteAction\n      }\n\n      await writeFile(propertyListOutputFile, buildPlist(plistInfo))\n    }\n\n    // now build the package\n    const args = [\n      \"--root\", rootPath,\n      \"--component-plist\", propertyListOutputFile,\n    ]\n\n    use(this.options.installLocation || \"/Applications\", it => args.push(\"--install-location\", it!))\n    if (options.scripts != null) {\n      args.push(\"--scripts\", path.resolve(this.packager.info.buildResourcesDir, options.scripts))\n    }\n    else if (options.scripts !== null) {\n      const dir = path.join(this.packager.info.buildResourcesDir, \"pkg-scripts\")\n      const stat = await statOrNull(dir)\n      if (stat != null && stat.isDirectory()) {\n        args.push(\"--scripts\", dir)\n      }\n    }\n\n    args.push(packageOutputFile)\n\n    await exec(\"pkgbuild\", args)\n  }\n}\n\nexport function prepareProductBuildArgs(identity: Identity | null, keychain: string | null | undefined): Array<string> {\n  const args: Array<string> = []\n  if (identity != null) {\n    args.push(\"--sign\", identity.hash)\n    if (keychain != null) {\n      args.push(\"--keychain\", keychain)\n    }\n  }\n  return args\n}"],"sourceRoot":""}

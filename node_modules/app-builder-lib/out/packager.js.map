{"version":3,"sources":["../src/packager.ts"],"names":[],"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { addValue, Arch, archFromString, AsyncTaskManager, DebugLogger, deepAssign, exec, InvalidConfigurationError, log, safeStringifyJson, serializeToYaml, TmpDir } from \"builder-util\"\nimport { CancellationToken } from \"builder-util-runtime\"\nimport { exists } from \"builder-util/out/fs\"\nimport { executeFinally, orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { EventEmitter } from \"events\"\nimport { ensureDir, outputFile } from \"fs-extra-p\"\nimport isCI from \"is-ci\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { AppInfo } from \"./appInfo\"\nimport { readAsarJson } from \"./asar/asar\"\nimport { createElectronFrameworkSupport } from \"./electron/ElectronFramework\"\nimport { AfterPackContext, Configuration, Framework, Platform, SourceRepositoryInfo, Target } from \"./index\"\nimport MacPackager from \"./macPackager\"\nimport { Metadata } from \"./options/metadata\"\nimport { ArtifactCreated, PackagerOptions } from \"./packagerApi\"\nimport { PlatformPackager, resolveFunction } from \"./platformPackager\"\nimport { createProtonFrameworkSupport } from \"./ProtonFramework\"\nimport { computeArchToTargetNamesMap, createTargets, NoOpTarget } from \"./targets/targetFactory\"\nimport { computeDefaultAppDirectory, getConfig, validateConfig } from \"./util/config\"\nimport { expandMacro } from \"./util/macroExpander\"\nimport { Dependency, getProductionDependencies } from \"./util/packageDependencies\"\nimport { checkMetadata, readPackageJson } from \"./util/packageMetadata\"\nimport { getRepositoryInfo } from \"./util/repositoryInfo\"\nimport { getGypEnv, installOrRebuild } from \"./util/yarn\"\nimport { WinPackager } from \"./winPackager\"\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\n  emitter.on(event, handler)\n}\n\ndeclare const PACKAGE_VERSION: string\n\nasync function createFrameworkInfo(configuration: Configuration, packager: Packager): Promise<Framework> {\n  if (configuration.protonNodeVersion != null) {\n    // require(\"proton-builder/out/ProtonFramework\")\n    return createProtonFrameworkSupport(configuration.protonNodeVersion!!, packager.appInfo)\n  }\n  else {\n    return await createElectronFrameworkSupport(configuration, packager)\n  }\n}\n\nexport class Packager {\n  readonly projectDir: string\n\n  private _appDir: string\n  get appDir(): string {\n    return this._appDir\n  }\n\n  private _metadata: Metadata | null = null\n  get metadata(): Metadata {\n    return this._metadata!!\n  }\n\n  private _nodeModulesHandledExternally: boolean = false\n\n  get areNodeModulesHandledExternally(): boolean {\n    return this._nodeModulesHandledExternally\n  }\n\n  private _isPrepackedAppAsar: boolean = false\n\n  get isPrepackedAppAsar(): boolean {\n    return this._isPrepackedAppAsar\n  }\n\n  private _devMetadata: Metadata | null = null\n  get devMetadata(): Metadata | null {\n    return this._devMetadata\n  }\n\n  private _configuration: Configuration | null = null\n\n  get config(): Configuration {\n    return this._configuration!!\n  }\n\n  isTwoPackageJsonProjectLayoutUsed = false\n\n  readonly eventEmitter = new EventEmitter()\n\n  _appInfo: AppInfo | null = null\n  get appInfo(): AppInfo {\n    return this._appInfo!!\n  }\n\n  readonly tempDirManager = new TmpDir(\"packager\")\n\n  private _repositoryInfo = new Lazy<SourceRepositoryInfo | null>(() => getRepositoryInfo(this.projectDir, this.metadata, this.devMetadata))\n\n  private readonly afterPackHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\n\n  readonly options: PackagerOptions\n\n  readonly debugLogger = new DebugLogger(log.isDebugEnabled)\n\n  get repositoryInfo(): Promise<SourceRepositoryInfo | null> {\n    return this._repositoryInfo.value\n  }\n\n  private _productionDeps: Lazy<Array<Dependency>> | null = null\n\n  private get productionDeps(): Lazy<Array<Dependency>> {\n    let result = this._productionDeps\n    if (result == null) {\n      // https://github.com/electron-userland/electron-builder/issues/2551\n      result = new Lazy(async () => {\n        if (this.config.beforeBuild == null || (await exists(path.join(this.appDir, \"node_modules\")))) {\n          return await getProductionDependencies(this.appDir)\n        }\n        else {\n          return []\n        }\n      })\n      this._productionDeps = result\n    }\n    return result\n  }\n\n  stageDirPathCustomizer: (target: Target, packager: PlatformPackager<any>, arch: Arch) => string = (target, packager, arch) => {\n    return path.join(target.outDir, `__${target.name}-${Arch[arch]}`)\n  }\n\n  private _buildResourcesDir: string | null = null\n\n  get buildResourcesDir(): string {\n    let result = this._buildResourcesDir\n    if (result == null) {\n      result = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n      this._buildResourcesDir = result\n    }\n    return result\n  }\n\n  get relativeBuildResourcesDirname(): string {\n    return this.config.directories!!.buildResources!!\n  }\n\n  private _framework: Framework | null = null\n  get framework(): Framework {\n    return this._framework!!\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(options: PackagerOptions, readonly cancellationToken = new CancellationToken()) {\n    if (\"devMetadata\" in options) {\n      throw new InvalidConfigurationError(\"devMetadata in the options is deprecated, please use config instead\")\n    }\n    if (\"extraMetadata\" in options) {\n      throw new InvalidConfigurationError(\"extraMetadata in the options is deprecated, please use config.extraMetadata instead\")\n    }\n\n    const targets = options.targets || new Map<Platform, Map<Arch, Array<string>>>()\n    if (options.targets == null) {\n      options.targets = targets\n    }\n\n    function processTargets(platform: Platform, types: Array<string>) {\n      function commonArch(currentIfNotSpecified: boolean): Array<Arch> {\n        if (platform === Platform.MAC) {\n          return currentIfNotSpecified ? [Arch.x64] : []\n        }\n\n        const result = Array<Arch>()\n        return result.length === 0 && currentIfNotSpecified ? [archFromString(process.arch)] : result\n      }\n\n      let archToType = targets.get(platform)\n      if (archToType == null) {\n        archToType = new Map<Arch, Array<string>>()\n        targets.set(platform, archToType)\n      }\n\n      if (types.length === 0) {\n        for (const arch of commonArch(false)) {\n          archToType.set(arch, [])\n        }\n        return\n      }\n\n      for (const type of types) {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (const arch of commonArch(true)) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n\n    if (options.mac != null) {\n      processTargets(Platform.MAC, options.mac)\n    }\n    if (options.linux != null) {\n      processTargets(Platform.LINUX, options.linux)\n    }\n    if (options.win != null) {\n      processTargets(Platform.WINDOWS, options.win)\n    }\n\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n    this._appDir = this.projectDir\n    this.options = {\n      ...options,\n      prepackaged: options.prepackaged == null ? null : path.resolve(this.projectDir, options.prepackaged)\n    }\n\n    try {\n      log.info({version: PACKAGE_VERSION}, \"electron-builder\")\n    }\n    catch (e) {\n      // error in dev mode without babel\n      if (!(e instanceof ReferenceError)) {\n        throw e\n      }\n    }\n  }\n\n  addAfterPackHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\n    this.afterPackHandlers.push(handler)\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  dispatchArtifactCreated(event: ArtifactCreated) {\n    this.eventEmitter.emit(\"artifactCreated\", event)\n  }\n\n  async build(): Promise<BuildResult> {\n    let configPath: string | null = null\n    let configFromOptions = this.options.config\n    if (typeof configFromOptions === \"string\") {\n      // it is a path to config file\n      configPath = configFromOptions\n      configFromOptions = null\n    }\n    else if (configFromOptions != null && configFromOptions.extends != null && configFromOptions.extends.includes(\".\")) {\n      configPath = configFromOptions.extends\n      delete configFromOptions.extends\n    }\n\n    const projectDir = this.projectDir\n\n    const devPackageFile = path.join(projectDir, \"package.json\")\n    this._devMetadata = await orNullIfFileNotExist(readPackageJson(devPackageFile))\n\n    const devMetadata = this.devMetadata\n    const configuration = await getConfig(projectDir, configPath, configFromOptions, new Lazy(() => Promise.resolve(devMetadata)))\n    if (log.isDebugEnabled) {\n      log.debug({config: getSafeEffectiveConfig(configuration)}, \"effective config\")\n    }\n\n    this._appDir = await computeDefaultAppDirectory(projectDir, configuration.directories!!.app)\n    this.isTwoPackageJsonProjectLayoutUsed = this._appDir !== projectDir\n\n    const appPackageFile = this.isTwoPackageJsonProjectLayoutUsed ? path.join(this.appDir, \"package.json\") : devPackageFile\n\n    // tslint:disable:prefer-conditional-expression\n    if (this.devMetadata != null && !this.isTwoPackageJsonProjectLayoutUsed) {\n      this._metadata = this.devMetadata\n    }\n    else {\n      this._metadata = await this.readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile)\n    }\n    deepAssign(this.metadata, configuration.extraMetadata)\n\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      log.debug({devPackageFile, appPackageFile}, \"two package.json structure is used\")\n    }\n    checkMetadata(this.metadata, this.devMetadata, appPackageFile, devPackageFile)\n\n    return await this._build(configuration, this._metadata, this._devMetadata)\n  }\n\n  // external caller of this method always uses isTwoPackageJsonProjectLayoutUsed=false and appDir=projectDir, no way (and need) to use another values\n  async _build(configuration: Configuration, metadata: Metadata, devMetadata: Metadata | null, repositoryInfo?: SourceRepositoryInfo): Promise<BuildResult> {\n    await validateConfig(configuration, this.debugLogger)\n    this._configuration = configuration\n    this._metadata = metadata\n    this._devMetadata = devMetadata\n\n    if (repositoryInfo != null) {\n      this._repositoryInfo.value = Promise.resolve(repositoryInfo)\n    }\n\n    this._appInfo = new AppInfo(this, null)\n    this._framework = await createFrameworkInfo(this.config, this)\n\n    const outDir = path.resolve(this.projectDir, expandMacro(configuration.directories!!.output!!, null, this._appInfo))\n\n    if (!isCI && (process.stdout as any).isTTY) {\n      const effectiveConfigFile = path.join(outDir, \"builder-effective-config.yaml\")\n      log.info({file: log.filePath(effectiveConfigFile)}, \"writing effective config\")\n      await outputFile(effectiveConfigFile, getSafeEffectiveConfig(configuration))\n    }\n\n    // because artifact event maybe dispatched several times for different publish providers\n    const artifactPaths = new Set<string>()\n    this.artifactCreated(event => {\n      if (event.file != null) {\n        artifactPaths.add(event.file)\n      }\n    })\n\n    const platformToTargets = await executeFinally(this.doBuild(outDir), async () => {\n      if (this.debugLogger.isEnabled) {\n        await this.debugLogger.save(path.join(outDir, \"builder-debug.yml\"))\n      }\n      await this.tempDirManager.cleanup()\n    })\n\n    return {\n      outDir,\n      artifactPaths: Array.from(artifactPaths),\n      platformToTargets,\n      configuration,\n    }\n  }\n\n  private async readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile: string): Promise<Metadata> {\n    let data = await orNullIfFileNotExist(readPackageJson(appPackageFile))\n    if (data != null) {\n      return data\n    }\n\n    data = await orNullIfFileNotExist(readAsarJson(path.join(this.projectDir, \"app.asar\"), \"package.json\"))\n    if (data != null) {\n      this._isPrepackedAppAsar = true\n      return data\n    }\n\n    throw new Error(`Cannot find package.json in the ${path.dirname(appPackageFile)}`)\n  }\n\n  private async doBuild(outDir: string): Promise<Map<Platform, Map<string, Target>>> {\n    const taskManager = new AsyncTaskManager(this.cancellationToken)\n\n    const platformToTarget = new Map<Platform, Map<string, Target>>()\n    const createdOutDirs = new Set<string>()\n\n    for (const [platform, archToType] of this.options.targets!) {\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      if (platform === Platform.MAC && process.platform === Platform.WINDOWS.nodeName) {\n        throw new InvalidConfigurationError(\"Build for macOS is supported only on macOS, please see https://electron.build/multi-platform-build\")\n      }\n\n      const packager = this.createHelper(platform)\n      const nameToTarget: Map<string, Target> = new Map()\n      platformToTarget.set(platform, nameToTarget)\n\n      for (const [arch, targetNames] of computeArchToTargetNamesMap(archToType, packager.platformSpecificBuildOptions, platform)) {\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        await this.installAppDependencies(platform, arch)\n\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        const targetList = createTargets(nameToTarget, targetNames.length === 0 ? packager.defaultTarget : targetNames, outDir, packager)\n        await createOutDirIfNeed(targetList, createdOutDirs)\n        await packager.pack(outDir, arch, targetList, taskManager)\n      }\n\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      for (const target of nameToTarget.values()) {\n        taskManager.addTask(target.finishBuild())\n      }\n    }\n\n    await taskManager.awaitTasks()\n    return platformToTarget\n  }\n\n  private createHelper(platform: Platform): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory!(this, platform)\n    }\n\n    switch (platform) {\n      case Platform.MAC:\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(`Unknown platform: ${platform}`)\n    }\n  }\n\n  private async installAppDependencies(platform: Platform, arch: Arch): Promise<any> {\n    if (this.options.prepackaged != null || this.framework.isNpmRebuildRequired !== true) {\n      return\n    }\n\n    const frameworkInfo = {version: this.framework.version, useCustomDist: this.config.muonVersion == null}\n    const config = this.config\n    if (config.nodeGypRebuild === true) {\n      log.info({arch: Arch[arch]}, \"executing node-gyp rebuild\")\n      await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n        env: getGypEnv(frameworkInfo, platform.nodeName, Arch[arch], true),\n      })\n    }\n\n    if (config.npmRebuild === false) {\n      log.info({reason: \"npmRebuild is set to false\"}, \"skipped app dependencies rebuild\")\n      return\n    }\n\n    const beforeBuild = resolveFunction(config.beforeBuild, \"beforeBuild\")\n    if (beforeBuild != null) {\n      const performDependenciesInstallOrRebuild = await beforeBuild({\n        appDir: this.appDir,\n        electronVersion: this.config.electronVersion!,\n        platform,\n        arch: Arch[arch]\n      })\n\n      // If beforeBuild resolves to false, it means that handling node_modules is done outside of electron-builder.\n      this._nodeModulesHandledExternally = !performDependenciesInstallOrRebuild\n      if (!performDependenciesInstallOrRebuild) {\n        return\n      }\n    }\n\n    if (config.buildDependenciesFromSource === true && platform.nodeName !== process.platform) {\n      log.info({reason: \"platform is different and buildDependenciesFromSource is set to true\"}, \"skipped app dependencies rebuild\")\n    }\n    else {\n      await installOrRebuild(config, this.appDir, {\n        frameworkInfo,\n        platform: platform.nodeName,\n        arch: Arch[arch],\n        productionDeps: this.productionDeps,\n      })\n    }\n  }\n\n  afterPack(context: AfterPackContext): Promise<any> {\n    const afterPack = resolveFunction(this.config.afterPack, \"afterPack\")\n    const handlers = this.afterPackHandlers.slice()\n    if (afterPack != null) {\n      // user handler should be last\n      handlers.push(afterPack)\n    }\n    return BluebirdPromise.each(handlers, it => it(context))\n  }\n}\n\nfunction createOutDirIfNeed(targetList: Array<Target>, createdOutDirs: Set<string>): Promise<any> {\n  const ourDirs = new Set<string>()\n  for (const target of targetList) {\n    // noinspection SuspiciousInstanceOfGuard\n    if (target instanceof NoOpTarget) {\n      continue\n    }\n\n    const outDir = (target as Target).outDir\n    if (!createdOutDirs.has(outDir)) {\n      ourDirs.add(outDir)\n    }\n  }\n\n  if (ourDirs.size > 0) {\n    return BluebirdPromise.map(Array.from(ourDirs).sort(), it => {\n      createdOutDirs.add(it)\n      return ensureDir(it)\n    })\n  }\n  return Promise.resolve()\n}\n\nexport interface BuildResult {\n  readonly outDir: string\n  readonly artifactPaths: Array<string>\n  readonly platformToTargets: Map<Platform, Map<string, Target>>\n  readonly configuration: Configuration\n}\n\nfunction getSafeEffectiveConfig(configuration: Configuration): string {\n  const o = JSON.parse(safeStringifyJson(configuration))\n  if (o.cscLink != null) {\n    o.cscLink = \"<hidden by builder>\"\n  }\n  return serializeToYaml(o, true)\n}"],"sourceRoot":""}

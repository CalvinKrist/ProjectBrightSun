{"version":3,"sources":["../src/Framework.ts"],"names":[],"mappings":";;;;;;;AAkCM,SAAU,eAAV,CAA0B,SAA1B,EAA8C;AAClD,SAAO,UAAU,IAAV,KAAmB,UAAnB,IAAiC,UAAU,IAAV,KAAmB,MAA3D;AACD,C","sourcesContent":["import { FileTransformer } from \"builder-util/out/fs\"\nimport { AsarIntegrity } from \"./asar/integrity\"\nimport { Platform, PlatformPackager, ElectronPlatformName } from \"./index\"\n\nexport interface Framework {\n  readonly name: string\n  readonly version: string\n  readonly distMacOsAppName: string\n  readonly macOsDefaultTargets: Array<string>\n  readonly defaultAppIdPrefix: string\n\n  readonly isNpmRebuildRequired: boolean\n\n  readonly isDefaultAppIconProvided: boolean\n  getDefaultIcon?(platform: Platform): string\n\n  prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions): Promise<any>\n\n  beforeCopyExtraFiles?(packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null): Promise<any>\n\n  createTransformer?(): FileTransformer | null\n}\n\nexport interface PrepareApplicationStageDirectoryOptions {\n  readonly packager: PlatformPackager<any>\n  /**\n   * Platform doesn't process application output directory in any way. Unpack implementation must create or empty dir if need.\n   */\n  readonly appOutDir: string\n  readonly platformName: ElectronPlatformName\n  readonly arch: string\n  readonly version: string\n}\n\nexport function isElectronBased(framework: Framework) {\n  return framework.name === \"electron\" || framework.name === \"muon\"\n}"],"sourceRoot":""}

{"version":3,"sources":["../src/publisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, log } from \"builder-util\"\nimport { CancellationToken, ProgressCallbackTransform } from \"builder-util-runtime\"\nimport { PADDING } from \"builder-util/out/log\"\nimport chalk from \"chalk\"\nimport { createReadStream, stat, Stats } from \"fs-extra-p\"\nimport { ClientRequest } from \"http\"\nimport { basename } from \"path\"\nimport { MultiProgress } from \"./multiProgress\"\nimport { ProgressBar } from \"./progress\"\n\nexport type PublishPolicy = \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n\nexport { ProgressCallback } from \"./progress\"\n\nexport interface PublishOptions {\n  publish?: PublishPolicy | null\n}\n\nexport interface PublishContext {\n  readonly cancellationToken: CancellationToken\n  readonly progress: MultiProgress | null\n}\n\nconst progressBarOptions = {\n  incomplete: \" \",\n  width: 20,\n}\n\nexport interface UploadTask {\n  file: string\n  fileContent?: Buffer | null\n\n  arch: Arch | null\n  safeArtifactName?: string | null\n}\n\nexport abstract class Publisher {\n  protected constructor(protected readonly context: PublishContext) {\n  }\n\n  abstract get providerName(): string\n\n  abstract upload(task: UploadTask): Promise<any>\n\n  protected createProgressBar(fileName: string, size: number): ProgressBar | null {\n    log.info({file: fileName, provider: this.providerName}, \"uploading\")\n    if (this.context.progress == null || size < (512 * 1024)) {\n      return null\n    }\n    return this.context.progress.createBar(`${\" \".repeat(PADDING + 2)}[:bar] :percent :etas | ${chalk.green(fileName)} to ${this.providerName}`, {total: size, ...progressBarOptions})\n  }\n\n  protected createReadStreamAndProgressBar(file: string, fileStat: Stats, progressBar: ProgressBar | null, reject: (error: Error) => void): NodeJS.ReadableStream {\n    const fileInputStream = createReadStream(file)\n    fileInputStream.on(\"error\", reject)\n\n    if (progressBar == null) {\n      return fileInputStream\n    }\n    else {\n      const progressStream = new ProgressCallbackTransform(fileStat.size, this.context.cancellationToken, it => progressBar.tick(it.delta))\n      progressStream.on(\"error\", reject)\n      return fileInputStream.pipe(progressStream)\n    }\n  }\n\n  abstract toString(): string\n}\n\nexport abstract class HttpPublisher extends Publisher {\n  constructor(protected readonly context: PublishContext, private readonly useSafeArtifactName = false) {\n    super(context)\n  }\n\n  async upload(task: UploadTask): Promise<any> {\n    const fileName = (this.useSafeArtifactName ? task.safeArtifactName : null) || basename(task.file)\n\n    if (task.fileContent != null) {\n      await this.doUpload(fileName, task.arch || Arch.x64, task.fileContent.length, it => it.end(task.fileContent))\n      return\n    }\n\n    const fileStat = await stat(task.file)\n\n    const progressBar = this.createProgressBar(fileName, fileStat.size)\n    await this.doUpload(fileName, task.arch || Arch.x64, fileStat.size, (request, reject) => {\n      if (progressBar != null) {\n        // reset (because can be called several times (several attempts)\n        progressBar.update(0)\n      }\n      return this.createReadStreamAndProgressBar(task.file, fileStat, progressBar, reject).pipe(request)\n    }, task.file)\n  }\n\n  protected abstract doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, file?: string): Promise<any>\n}\n\nexport function getCiTag() {\n  const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG || process.env.BITRISE_GIT_TAG || process.env.CI_BUILD_TAG\n  return tag != null && tag.length > 0 ? tag : null\n}"],"sourceRoot":""}

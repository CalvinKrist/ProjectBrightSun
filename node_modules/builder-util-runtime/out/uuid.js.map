{"version":3,"sources":["../src/uuid.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash, randomBytes } from \"crypto\"\nimport { newError } from \"./index\"\n\nconst invalidName =\n  \"options.name must be either a string or a Buffer\"\n\nconst moreThan10000 =\n  \"can not generate more than 10000 UUIDs per second\"\n\n// Node ID according to rfc4122#section-4.5\nconst randomHost = randomBytes(16)\nrandomHost[0] = randomHost[0] | 0x01\n\n// randomize clockSeq initially, as per rfc4122#section-4.1.5\nconst seed = randomBytes(2)\nlet clockSeq = (seed[0] | (seed[1] << 8)) & 0x3fff\n\n// clock values\nlet lastMTime = 0\nlet lastNTime = 0\n\n// lookup table hex to byte\nconst hex2byte: any = {}\n\n// lookup table byte to hex\nconst byte2hex: Array<string> = []\n// populate lookup tables\nfor (let i = 0; i < 256; i++) {\n    const hex = (i + 0x100).toString(16).substr(1)\n    hex2byte[hex] = i\n    byte2hex[i] = hex\n}\n\n// UUID class\nexport class UUID {\n  private ascii: string | null = null\n  private readonly binary: Buffer | null = null\n  private readonly version: number\n\n  // from rfc4122#appendix-C\n  static readonly OID = UUID.parse(\"6ba7b812-9dad-11d1-80b4-00c04fd430c8\")\n\n  constructor(uuid: Buffer | string) {\n    const check = UUID.check(uuid)\n    if (!check) {\n      throw new Error(\"not a UUID\")\n    }\n\n    this.version = check.version!!\n\n    if (check.format === \"ascii\") {\n      this.ascii = uuid as string\n    }\n    else {\n      this.binary = uuid as Buffer\n    }\n  }\n\n  static v1() {\n    return uuidTimeBased(randomHost)\n  }\n\n  static v5(name: string | Buffer, namespace: Buffer) {\n    return uuidNamed(name, \"sha1\", 0x50, namespace)\n  }\n\n  toString() {\n    if (this.ascii == null) {\n      this.ascii = stringify(this.binary!!)\n    }\n    return this.ascii\n  }\n\n  inspect() {\n    return `UUID v${this.version} ${this.toString()}`\n  }\n\n  static check(uuid: Buffer | string, offset: number = 0) {\n    if (typeof uuid === \"string\") {\n      uuid = uuid.toLowerCase()\n\n      if (!/^[a-f0-9]{8}(-[a-f0-9]{4}){3}-([a-f0-9]{12})$/.test(uuid)) {\n        return false\n      }\n\n      if (uuid === \"00000000-0000-0000-0000-000000000000\") {\n        return {version: undefined, variant: \"nil\", format: \"ascii\"}\n      }\n\n      return {\n        version: (hex2byte[uuid[14] + uuid[15]] & 0xf0) >> 4,\n        variant: getVariant((hex2byte[uuid[19] + uuid[20]] & 0xe0) >> 5),\n        format: \"ascii\"\n      }\n    }\n\n    if (Buffer.isBuffer(uuid)) {\n      if (uuid.length < offset + 16) {\n        return false\n      }\n\n      let i = 0\n      for (; i < 16; i++) {\n        if (uuid[offset + i] !== 0) {\n          break\n        }\n      }\n      if (i === 16) {\n        return {version: undefined, variant: \"nil\", format: \"binary\"}\n      }\n\n      return {\n        version: (uuid[offset + 6] & 0xf0) >> 4,\n        variant: getVariant((uuid[offset + 8] & 0xe0) >> 5),\n        format: \"binary\"\n      }\n    }\n\n    throw newError(\"Unknown type of uuid\", \"ERR_UNKNOWN_UUID_TYPE\")\n  }\n\n  // read stringified uuid into a Buffer\n  static parse(input: string) {\n    const buffer = Buffer.allocUnsafe(16)\n    let j = 0\n    for (let i = 0; i < 16; i++) {\n      buffer[i] = hex2byte[input[j++] + input[j++]]\n      if (i === 3 || i === 5 || i === 7 || i === 9) {\n        j += 1\n      }\n    }\n    return buffer\n  }\n}\n\n// according to rfc4122#section-4.1.1\nfunction getVariant(bits: number) {\n    switch (bits) {\n        case 0: case 1: case 3:\n            return \"ncs\"\n        case 4: case 5:\n            return \"rfc4122\"\n        case 6:\n            return \"microsoft\"\n        default:\n            return \"future\"\n    }\n}\n\nenum UuidEncoding {\n  ASCII, BINARY, OBJECT\n}\n\n// v1\nfunction uuidTimeBased(nodeId: Buffer, encoding: UuidEncoding = UuidEncoding.ASCII) {\n  let mTime = Date.now()\n  let nTime = lastNTime + 1\n  const delta = (mTime - lastMTime) + (nTime - lastNTime) / 10000\n\n  if (delta < 0) {\n    clockSeq = (clockSeq + 1) & 0x3fff\n    nTime = 0\n  }\n  else if (mTime > lastMTime) {\n    nTime = 0\n  }\n  else if (nTime >= 10000) {\n    return moreThan10000\n  }\n\n  lastMTime = mTime\n  lastNTime = nTime\n\n  // unix timestamp to gregorian epoch as per rfc4122#section-4.5\n  mTime += 12219292800000\n\n  const buffer = Buffer.allocUnsafe(16)\n  const myClockSeq = clockSeq\n  const timeLow = ((mTime & 0xfffffff) * 10000 + nTime) % 0x100000000\n  const timeHigh = (mTime / 0x100000000 * 10000) & 0xfffffff\n\n  buffer[0] = timeLow >>> 24 & 0xff\n  buffer[1] = timeLow >>> 16 & 0xff\n  buffer[2] = timeLow >>> 8 & 0xff\n  buffer[3] = timeLow & 0xff\n\n  buffer[4] = timeHigh >>> 8 & 0xff\n  buffer[5] = timeHigh & 0xff\n\n  buffer[6] = (timeHigh >>> 24 & 0x0f) | 0x10\n  buffer[7] = (timeHigh >>> 16 & 0x3f) | 0x80\n\n  buffer[8] = myClockSeq >>> 8\n  buffer[9] = myClockSeq & 0xff\n\n  let result: any\n  switch (encoding) {\n    case UuidEncoding.BINARY:\n      buffer[10] = nodeId[0]\n      buffer[11] = nodeId[1]\n      buffer[12] = nodeId[2]\n      buffer[13] = nodeId[3]\n      buffer[14] = nodeId[4]\n      buffer[15] = nodeId[5]\n      result = buffer\n      break\n    case UuidEncoding.OBJECT:\n      buffer[10] = nodeId[0]\n      buffer[11] = nodeId[1]\n      buffer[12] = nodeId[2]\n      buffer[13] = nodeId[3]\n      buffer[14] = nodeId[4]\n      buffer[15] = nodeId[5]\n      result = new UUID(buffer)\n      break\n    default:\n      result = byte2hex[buffer[0]] + byte2hex[buffer[1]] +\n        byte2hex[buffer[2]] + byte2hex[buffer[3]] + \"-\" +\n        byte2hex[buffer[4]] + byte2hex[buffer[5]] + \"-\" +\n        byte2hex[buffer[6]] + byte2hex[buffer[7]] + \"-\" +\n        byte2hex[buffer[8]] + byte2hex[buffer[9]] + \"-\" +\n        byte2hex[nodeId[0]] + byte2hex[nodeId[1]] +\n        byte2hex[nodeId[2]] + byte2hex[nodeId[3]] +\n        byte2hex[nodeId[4]] + byte2hex[nodeId[5]]\n      break\n  }\n  return result\n}\n\n// v3 + v5\nfunction uuidNamed(name: string | Buffer, hashMethod: string, version: number, namespace: Buffer, encoding: UuidEncoding = UuidEncoding.ASCII) {\n  const hash = createHash(hashMethod)\n\n  const nameIsNotAString = typeof name !== \"string\"\n  if (nameIsNotAString && !Buffer.isBuffer(name)) {\n    throw newError(invalidName, \"ERR_INVALID_UUID_NAME\")\n  }\n\n  hash.update(namespace)\n  hash.update(name)\n\n  const buffer = hash.digest()\n  let result: any\n  switch (encoding) {\n    case UuidEncoding.BINARY:\n      buffer[6] = (buffer[6] & 0x0f) | version\n      buffer[8] = (buffer[8] & 0x3f) | 0x80\n      result = buffer\n      break\n    case UuidEncoding.OBJECT:\n      buffer[6] = (buffer[6] & 0x0f) | version\n      buffer[8] = (buffer[8] & 0x3f) | 0x80\n      result = new UUID(buffer)\n      break\n    default:\n      result = byte2hex[buffer[0]] + byte2hex[buffer[1]] +\n        byte2hex[buffer[2]] + byte2hex[buffer[3]] + \"-\" +\n        byte2hex[buffer[4]] + byte2hex[buffer[5]] + \"-\" +\n        byte2hex[(buffer[6] & 0x0f) | version] +\n        byte2hex[buffer[7]] + \"-\" +\n        byte2hex[(buffer[8] & 0x3f) | 0x80] +\n        byte2hex[buffer[9]] + \"-\" +\n        byte2hex[buffer[10]] + byte2hex[buffer[11]] +\n        byte2hex[buffer[12]] + byte2hex[buffer[13]] +\n        byte2hex[buffer[14]] + byte2hex[buffer[15]]\n      break\n  }\n  return result\n}\n\nfunction stringify(buffer: Buffer) {\n  return byte2hex[buffer[0]] + byte2hex[buffer[1]] +\n    byte2hex[buffer[2]] + byte2hex[buffer[3]] + \"-\" +\n    byte2hex[buffer[4]] + byte2hex[buffer[5]] + \"-\" +\n    byte2hex[buffer[6]] + byte2hex[buffer[7]] + \"-\" +\n    byte2hex[buffer[8]] + byte2hex[buffer[9]] + \"-\" +\n    byte2hex[buffer[10]] + byte2hex[buffer[11]] +\n    byte2hex[buffer[12]] + byte2hex[buffer[13]] +\n    byte2hex[buffer[14]] + byte2hex[buffer[15]]\n}\n\n// according to rfc4122#section-4.1.7\nexport const nil = new UUID(\"00000000-0000-0000-0000-000000000000\")\n\n// UUID.v4 = uuidRandom\n\n// UUID.v4fast = uuidRandomFast\n\n// UUID.v3 = function(options, callback) {\n//     return uuidNamed(\"md5\", 0x30, options, callback)\n// }"],"sourceRoot":""}

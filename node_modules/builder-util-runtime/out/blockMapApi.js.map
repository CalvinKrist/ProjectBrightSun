{"version":3,"sources":["../src/blockMapApi.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;2CAiBO,WAAwC,IAAxC,EAAoD;AACzD,UAAM,KAAK,MAAM,sBAAK,IAAL,EAAW,GAAX,CAAjB;;AACA,QAAI;AACF,YAAM,WAAW,CAAC,MAAM,uBAAM,EAAN,CAAP,EAAkB,IAAnC;AACA,YAAM,aAAa,OAAO,WAAP,CAAmB,CAAnB,CAAnB;AACA,YAAM,sBAAK,EAAL,EAAS,UAAT,EAAqB,CAArB,EAAwB,WAAW,MAAnC,EAA2C,WAAW,WAAW,MAAjE,CAAN;AAEA,YAAM,aAAa,OAAO,WAAP,CAAmB,WAAW,YAAX,CAAwB,CAAxB,CAAnB,CAAnB;AACA,YAAM,sBAAK,EAAL,EAAS,UAAT,EAAqB,CAArB,EAAwB,WAAW,MAAnC,EAA2C,WAAW,WAAW,MAAtB,GAA+B,WAAW,MAArF,CAAN;AACA,YAAM,uBAAM,EAAN,CAAN;;AAEA,YAAM,aAAkB,uBAAgB,SAAhB,CAA0B,QAAQ,MAAR,EAAgB,UAA1C,CAAxB;;AACA,aAAO,CAAC,MAAM,WAAW,UAAX,CAAP,EAA+B,QAA/B,EAAP;AACD,KAXD,CAYA,OAAO,CAAP,EAAU;AACR,YAAM,uBAAM,EAAN,CAAN;AACA,YAAM,CAAN;AACD;AACF,G;;kBAlBW,wB","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { close, fstat, open, read } from \"fs-extra-p\"\n\nexport interface FileChunks {\n  checksums: Array<string>\n  sizes: Array<number>\n}\n\nexport interface BlockMap {\n  version: \"1\" | \"2\"\n  files: Array<BlockMapFile>\n}\n\nexport interface BlockMapFile extends FileChunks {\n  name: string\n  offset: number\n}\n\nexport async function readEmbeddedBlockMapData(file: string) {\n  const fd = await open(file, \"r\")\n  try {\n    const fileSize = (await fstat(fd)).size\n    const sizeBuffer = Buffer.allocUnsafe(4)\n    await read(fd, sizeBuffer, 0, sizeBuffer.length, fileSize - sizeBuffer.length)\n\n    const dataBuffer = Buffer.allocUnsafe(sizeBuffer.readUInt32BE(0))\n    await read(fd, dataBuffer, 0, dataBuffer.length, fileSize - sizeBuffer.length - dataBuffer.length)\n    await close(fd)\n\n    const inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n    return (await inflateRaw(dataBuffer)).toString()\n  }\n  catch (e) {\n    await close(fd)\n    throw e\n  }\n}"],"sourceRoot":""}

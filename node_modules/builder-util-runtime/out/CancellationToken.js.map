{"version":3,"sources":["../src/CancellationToken.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEM,MAAA,iBAAA,SAAiC,sBAAjC,CAA6C;AAiBjD;AACA,cAAY,MAAZ,EAAsC;AACpC;AAlBM,SAAA,mBAAA,GAA0C,IAA1C;AAOA,SAAA,OAAA,GAAoC,IAApC;AAaN,SAAK,UAAL,GAAkB,KAAlB;;AACA,QAAI,UAAU,IAAd,EAAoB;AAClB,WAAK,MAAL,GAAc,MAAd;AACD;AACF;;AArBD,MAAI,SAAJ,GAAa;AACX,WAAO,KAAK,UAAL,IAAoB,KAAK,OAAL,IAAgB,IAAhB,IAAwB,KAAK,OAAL,CAAa,SAAhE;AACD;;AAGD,MAAI,MAAJ,CAAW,KAAX,EAAmC;AACjC,SAAK,yBAAL;AAEA,SAAK,OAAL,GAAe,KAAf;;AACA,SAAK,mBAAL,GAA2B,MAAM,KAAK,MAAL,EAAjC;;AACA,SAAK,OAAL,CAAa,QAAb,CAAsB,KAAK,mBAA3B;AACD;;AAYD,WAAM;AACJ,SAAK,UAAL,GAAkB,IAAlB;AACA,SAAK,IAAL,CAAU,QAAV;AACD;;AAEO,WAAS,OAAT,EAA2B;AACjC,QAAI,KAAK,SAAT,EAAoB;AAClB;AACD,KAFD,MAGK;AACH,WAAK,IAAL,CAAU,QAAV,EAAoB,OAApB;AACD;AACF;;AAED,gBAAiB,QAAjB,EAAsJ;AACpJ,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,QAAQ,MAAR,CAAkB,IAAI,iBAAJ,EAAlB,CAAP;AACD;;AAED,QAAI,gBAAqC,IAAzC;AACA,WAAO,KAAI,sBAAJ,EAAuB,CAAC,OAAD,EAAU,MAAV,KAAoB;AAChD,UAAI,qBAA0C,IAA9C;;AAEA,sBAAgB,MAAK;AACnB,YAAI;AACF,cAAI,sBAAsB,IAA1B,EAAgC;AAC9B;AACA,iCAAqB,IAArB;AACD;AACF,SALD,SAMQ;AACN,iBAAO,IAAI,iBAAJ,EAAP;AACD;AACF,OAVD;;AAYA,UAAI,KAAK,SAAT,EAAoB;AAClB;AACA;AACD;;AAED,WAAK,QAAL,CAAc,aAAd;AAEA,eAAS,OAAT,EAAkB,MAAlB,EAA2B,QAAD,IAAyB;AACjD,6BAAqB,QAArB;AACD,OAFD;AAGD,KAzBM,EA0BJ,OA1BI,CA0BI,MAAK;AACZ,UAAI,iBAAiB,IAArB,EAA2B;AACzB,aAAK,cAAL,CAAoB,QAApB,EAA8B,aAA9B;AACA,wBAAgB,IAAhB;AACD;AACF,KA/BI,CAAP;AAgCD;;AAEO,8BAAyB;AAC/B,UAAM,SAAS,KAAK,OAApB;;AACA,QAAI,UAAU,IAAV,IAAkB,KAAK,mBAAL,IAA4B,IAAlD,EAAwD;AACtD,aAAO,cAAP,CAAsB,QAAtB,EAAgC,KAAK,mBAArC;AACA,WAAK,mBAAL,GAA2B,IAA3B;AACD;AACF;;AAED,YAAO;AACL,QAAI;AACF,WAAK,yBAAL;AACD,KAFD,SAGQ;AACN,WAAK,kBAAL;AACA,WAAK,OAAL,GAAe,IAAf;AACD;AACF;;AAjGgD;;;;AAoG7C,MAAA,iBAAA,SAAiC,KAAjC,CAAsC;AAC1C,gBAAA;AACE,UAAM,WAAN;AACD;;AAHyC,C","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { EventEmitter } from \"events\"\n\nexport class CancellationToken extends EventEmitter {\n  private parentCancelHandler: (() => any) | null = null\n\n  private _cancelled: boolean\n  get cancelled(): boolean {\n    return this._cancelled || (this._parent != null && this._parent.cancelled)\n  }\n\n  private _parent: CancellationToken | null = null\n  set parent(value: CancellationToken) {\n    this.removeParentCancelHandler()\n\n    this._parent = value\n    this.parentCancelHandler = () => this.cancel()\n    this._parent.onCancel(this.parentCancelHandler)\n  }\n\n  // babel cannot compile ... correctly for super calls\n  constructor(parent?: CancellationToken) {\n    super()\n\n    this._cancelled = false\n    if (parent != null) {\n      this.parent = parent\n    }\n  }\n\n  cancel() {\n    this._cancelled = true\n    this.emit(\"cancel\")\n  }\n\n  private onCancel(handler: () => any) {\n    if (this.cancelled) {\n      handler()\n    }\n    else {\n      this.once(\"cancel\", handler)\n    }\n  }\n\n  createPromise<R>(callback: (resolve: (thenableOrResult?: R) => void, reject: (error: Error) => void, onCancel: (callback: () => void) => void) => void): Promise<R> {\n    if (this.cancelled) {\n      return Promise.reject<R>(new CancellationError())\n    }\n\n    let cancelHandler: (() => void) | null = null\n    return new BluebirdPromise<R>((resolve, reject) => {\n      let addedCancelHandler: (() => void) | null = null\n\n      cancelHandler = () => {\n        try {\n          if (addedCancelHandler != null) {\n            addedCancelHandler()\n            addedCancelHandler = null\n          }\n        }\n        finally {\n          reject(new CancellationError())\n        }\n      }\n\n      if (this.cancelled) {\n        cancelHandler()\n        return\n      }\n\n      this.onCancel(cancelHandler)\n\n      callback(resolve, reject, (callback: () => void) => {\n        addedCancelHandler = callback\n      })\n    })\n      .finally(() => {\n        if (cancelHandler != null) {\n          this.removeListener(\"cancel\", cancelHandler)\n          cancelHandler = null\n        }\n      })\n  }\n\n  private removeParentCancelHandler() {\n    const parent = this._parent\n    if (parent != null && this.parentCancelHandler != null) {\n      parent.removeListener(\"cancel\", this.parentCancelHandler)\n      this.parentCancelHandler = null\n    }\n  }\n\n  dispose() {\n    try {\n      this.removeParentCancelHandler()\n    }\n    finally {\n      this.removeAllListeners()\n      this._parent = null\n    }\n  }\n}\n\nexport class CancellationError extends Error {\n  constructor() {\n    super(\"Cancelled\")\n  }\n}"],"sourceRoot":""}

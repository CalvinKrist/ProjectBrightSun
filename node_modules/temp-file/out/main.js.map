{"version":3,"sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { ensureDir, mkdtemp, realpath, remove, removeSync, unlink, unlinkSync } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\n\nlet tmpFileCounter = 0\nconst tmpDirManagers = new Set<TmpDir>()\n\n// add date to avoid use stale temp dir\nconst tempDirPrefix = `${process.pid.toString(36)}-${Date.now().toString(36)}`\n\nexport function getTempName(prefix?: string | null | undefined): string {\n  return `${prefix == null ? \"\" : `${prefix}-`}${tempDirPrefix}-${(tmpFileCounter++).toString(36)}`\n}\n\nconst tempDir = new Lazy<string>(() => {\n  let promise: Promise<string>\n  const systemTmpDir = process.env.TEST_TMP_DIR || process.env.ELECTRON_BUILDER_TMP_DIR || process.env.ELECTRON_BUILDER_TEST_DIR || tmpdir()\n  const isEnsureRemovedOnExit = process.env.TMP_DIR_MANAGER_ENSURE_REMOVED_ON_EXIT !== \"false\"\n  if (!isEnsureRemovedOnExit) {\n    promise = Promise.resolve(systemTmpDir)\n  }\n  else if (mkdtemp == null) {\n    const dir = path.join(systemTmpDir, getTempName(\"temp-files\"))\n    promise = ensureDir(dir, {mode: 448}).then(() => dir)\n  }\n  else {\n    promise = mkdtemp(`${path.join(systemTmpDir, \"temp-dir\")}-`)\n  }\n\n  return promise\n    .then(it => realpath(it))\n    .then(dir => {\n      if (isEnsureRemovedOnExit) {\n        addExitHook(dir)\n      }\n      return dir\n    })\n})\n\nfunction addExitHook(dir: string) {\n  require(\"async-exit-hook\")((callback: (() => void) | null) => {\n    const managers = Array.from(tmpDirManagers)\n    tmpDirManagers.clear()\n\n    if (callback == null) {\n      for (const manager of managers) {\n        manager.cleanupSync()\n      }\n\n      try {\n        removeSync(dir)\n      }\n      catch (e) {\n        handleError(e, dir)\n      }\n      return\n    }\n\n    // each instead of map to avoid fs overload\n    BluebirdPromise.each(managers, it => it.cleanup())\n      .then(() => remove(dir))\n      .then(() => callback())\n      .catch(e => {\n        try {\n          handleError(e, dir)\n        }\n        finally {\n          callback()\n        }\n      })\n  })\n}\n\nfunction handleError(e: any, file: string) {\n  if (e.code !== \"EPERM\" && e.code !== \"ENOENT\") {\n    // use only console.* instead of our warn on exit (otherwise nodeEmoji can be required on request)\n    console.warn(`Cannot delete temporary \"${file}\": ${(e.stack || e).toString()}`)\n  }\n}\n\ninterface TempFileInfo {\n  isDir: boolean\n  path: string\n  disposer?: ((file: string) => Promise<void>) | null\n}\n\nexport interface GetTempFileOptions {\n  prefix?: string | null\n  suffix?: string | null\n\n  disposer?: ((file: string) => Promise<void>) | null\n}\n\nexport class TmpDir {\n  private tempFiles: Array<TempFileInfo> = []\n  private registered = false\n\n  constructor(private readonly debugName: string = \"\") {\n  }\n\n  // noinspection JSMethodCanBeStatic\n  // noinspection JSUnusedGlobalSymbols\n  get rootTempDir(): Promise<string> {\n    return tempDir.value\n  }\n\n  getTempDir(options?: GetTempFileOptions): Promise<string> {\n    return this.getTempFile(options, true)\n  }\n\n  createTempDir(options?: GetTempFileOptions): Promise<string> {\n    return this.getTempFile(options, true)\n      .then(it => ensureDir(it).then(() => it))\n  }\n\n  getTempFile(options?: GetTempFileOptions, isDir = false): Promise<string> {\n    return tempDir.value\n      .then(it => {\n        if (!this.registered) {\n          this.registered = true\n          tmpDirManagers.add(this)\n        }\n\n        const prefix = nullize(options == null ? null : options.prefix)\n        const suffix = nullize(options == null ? null : options.suffix)\n        const namePrefix = prefix == null ? \"\" : `${prefix}-`\n        const nameSuffix = suffix == null ? \"\" : (suffix.startsWith(\".\") ? suffix : `-${suffix}`)\n        const result = `${it}${path.sep}${namePrefix}${(tmpFileCounter++).toString(36)}${nameSuffix}`\n        this.tempFiles.push({\n          path: result,\n          isDir,\n          disposer: options == null ? null : options.disposer,\n        })\n        return result\n      })\n  }\n\n  cleanupSync() {\n    const tempFiles = this.tempFiles\n    tmpDirManagers.delete(this)\n    this.registered = false\n    if (tempFiles.length === 0) {\n      return\n    }\n\n    this.tempFiles = []\n\n    for (const file of tempFiles) {\n      if (file.disposer != null) {\n        // noinspection JSIgnoredPromiseFromCall\n        file.disposer(file.path)\n        continue\n      }\n\n      try {\n        if (file.isDir) {\n          removeSync(file.path)\n        }\n        else {\n          unlinkSync(file.path)\n        }\n      }\n      catch (e) {\n        handleError(e, file.path)\n      }\n    }\n  }\n\n  cleanup(): Promise<any> {\n    const tempFiles = this.tempFiles\n    tmpDirManagers.delete(this)\n    this.registered = false\n    if (tempFiles.length === 0) {\n      return Promise.resolve()\n    }\n\n    this.tempFiles = []\n\n    return BluebirdPromise.map(tempFiles, it => {\n      if (it.disposer != null) {\n        return it.disposer(it.path)\n      }\n\n      return (it.isDir ? remove(it.path) : unlink(it.path))\n        .catch(e => {\n          handleError(e, it.path)\n        })\n    }, {concurrency: 8})\n  }\n\n  toString() {\n    return this.debugName\n  }\n}\n\nfunction nullize(s?: string | null) {\n  return s == null || s.length === 0 ? null : s\n}"],"sourceRoot":""}

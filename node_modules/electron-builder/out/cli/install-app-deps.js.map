{"version":3,"sources":["../../src/cli/install-app-deps.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAIA;AACM,SAAU,8BAAV,CAAyC,KAAzC,EAA2D;AAC/D;AACA;AACA,SAAO,MACJ,MADI,CACG,UADH,EACe;AAClB,aAAS,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CADS;AAElB,aAAS,QAAQ,QAFC;AAGlB,iBAAa;AAHK,GADf,EAMJ,MANI,CAMG,MANH,EAMW;AACd,aAAS,sCAAkB,MAAlB,CAAyB,KAAzB,CADK;AAEd,aAAS,QAAQ,IAAR,KAAiB,KAAjB,GAAyB,QAAzB,GAAoC,QAAQ,IAFvC;AAGd,iBAAa;AAHC,GANX,CAAP;AAWD;AAED;;;;2CACO,WAA8B,IAA9B,EAAuC;AAC5C,QAAI;AACF,yBAAI,IAAJ,CAAS;AAAC;AAAD,OAAT,EAAqC,kBAArC;AACD,KAFD,CAGA,OAAO,CAAP,EAAU;AACR;AACA,UAAI,EAAE,aAAa,cAAf,CAAJ,EAAoC;AAClC,cAAM,CAAN;AACD;AACF;;AAED,UAAM,aAAa,QAAQ,GAAR,EAAnB;AACA,UAAM,kBAAkB,KAAI,eAAJ,EAAS,MAAM,4CAAqB,0BAAS,KAAK,IAAL,CAAU,UAAV,EAAsB,cAAtB,CAAT,CAArB,CAAf,CAAxB;AACA,UAAM,SAAS,MAAM,yBAAU,UAAV,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,eAAlC,CAArB;AACA,UAAM,cAAc,OAAO,WAA3B;AACA,UAAM,UAAU,MAAM,QAAQ,GAAR,CAAoB,CACxC,0CAA2B,UAA3B,EAAuC,wBAAI,OAAO,WAAX,EAAwB,MAAM,GAAI,GAAlC,CAAvC,CADwC,EAExC,eAAe,IAAf,GAAsB,2CAAmB,UAAnB,EAA+B,MAA/B,EAAuC,eAAvC,CAAtB,GAAgF,QAAQ,OAAR,CAAgB,WAAhB,CAFxC,CAApB,CAAtB,CAf4C,CAoB5C;;AACA,UAAM,8BAAiB,MAAjB,EAAyB,QAAQ,CAAR,CAAzB,EAAqC;AACzC,qBAAe;AAAC,iBAAS,QAAQ,CAAR,CAAV;AAAsB,uBAAe,eAAe;AAApD,OAD0B;AAEzC,gBAAU,KAAK,QAF0B;AAGzC,YAAM,KAAK,IAH8B;AAIzC,sBAAgB,qDAAyB,QAAQ,CAAR,CAAzB;AAJyB,KAArC,EAKH,QAAQ,CAAR,MAAe,UALZ,CAAN;AAMD,G;;kBA3BqB,c;;;;;;;AA6BtB,SAAS,IAAT,GAAa;AACX,SAAO,eAAe,+BAA+B,gBAA/B,EAAsC,IAArD,CAAP;AACD;;AAED,IAAI,QAAQ,UAAR,KAAuB,MAA3B,EAAmC;AACjC,qBAAI,IAAJ,CAAS,6DAAT;;AACA,SACG,KADH,CACS,4BADT;AAED,C","sourcesContent":["#! /usr/bin/env node\n\nimport { log, use, getArchCliNames } from \"builder-util\"\nimport { printErrorAndExit } from \"builder-util/out/promise\"\nimport { computeDefaultAppDirectory, getConfig } from \"app-builder-lib/out/util/config\"\nimport { getElectronVersion } from \"app-builder-lib/out/electron/electronVersion\"\nimport { createLazyProductionDeps } from \"app-builder-lib/out/util/packageDependencies\"\nimport { installOrRebuild } from \"app-builder-lib/out/util/yarn\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { orNullIfFileNotExist } from \"read-config-file\"\nimport yargs from \"yargs\"\n\ndeclare const PACKAGE_VERSION: string\n\n/** @internal */\nexport function configureInstallAppDepsCommand(yargs: yargs.Yargs): yargs.Yargs {\n  // https://github.com/yargs/yargs/issues/760\n  // demandOption is required to be set\n  return yargs\n    .option(\"platform\", {\n      choices: [\"linux\", \"darwin\", \"win32\"],\n      default: process.platform,\n      description: \"The target platform\",\n    })\n    .option(\"arch\", {\n      choices: getArchCliNames().concat(\"all\"),\n      default: process.arch === \"arm\" ? \"armv7l\" : process.arch,\n      description: \"The target arch\",\n    })\n}\n\n/** @internal */\nexport async function installAppDeps(args: any) {\n  try {\n    log.info({version: PACKAGE_VERSION}, \"electron-builder\")\n  }\n  catch (e) {\n    // error in dev mode without babel\n    if (!(e instanceof ReferenceError)) {\n      throw e\n    }\n  }\n\n  const projectDir = process.cwd()\n  const packageMetadata = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))\n  const config = await getConfig(projectDir, null, null, packageMetadata)\n  const muonVersion = config.muonVersion\n  const results = await Promise.all<string>([\n    computeDefaultAppDirectory(projectDir, use(config.directories, it => it!.app)),\n    muonVersion == null ? getElectronVersion(projectDir, config, packageMetadata) : Promise.resolve(muonVersion),\n  ])\n\n  // if two package.json â€” force full install (user wants to install/update app deps in addition to dev)\n  await installOrRebuild(config, results[0], {\n    frameworkInfo: {version: results[1], useCustomDist: muonVersion == null},\n    platform: args.platform,\n    arch: args.arch,\n    productionDeps: createLazyProductionDeps(results[0]),\n  }, results[0] !== projectDir)\n}\n\nfunction main() {\n  return installAppDeps(configureInstallAppDepsCommand(yargs).argv)\n}\n\nif (process.mainModule === module) {\n  log.warn(\"please use as subcommand: electron-builder install-app-deps\")\n  main()\n    .catch(printErrorAndExit)\n}"],"sourceRoot":""}

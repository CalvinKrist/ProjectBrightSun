{"version":3,"sources":["../src/dmgUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec } from \"builder-util\"\nimport { PlatformPackager } from \"app-builder-lib\"\nimport { AsyncTaskManager } from \"builder-util/out/asyncTaskManager\"\nimport { exists } from \"builder-util/out/fs\"\nimport { executeFinally } from \"builder-util/out/promise\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { TmpDir } from \"temp-file\"\n\nexport { DmgTarget } from \"./dmg\"\n\nconst root = path.join(__dirname, \"..\")\n\nexport function getDmgTemplatePath() {\n  return path.join(root, \"templates\")\n}\n\nexport function getDmgVendorPath() {\n  return path.join(root, \"vendor\")\n}\n\nexport async function attachAndExecute(dmgPath: string, readWrite: boolean, task: () => Promise<any>) {\n  //noinspection SpellCheckingInspection\n  const args = [\"attach\", \"-noverify\", \"-noautoopen\"]\n  if (readWrite) {\n    args.push(\"-readwrite\")\n  }\n\n  args.push(dmgPath)\n  const attachResult = await exec(\"hdiutil\", args)\n  const deviceResult = attachResult == null ? null : /^(\\/dev\\/\\w+)/.exec(attachResult)\n  const device = deviceResult == null || deviceResult.length !== 2 ? null : deviceResult[1]\n  if (device == null) {\n    throw new Error(`Cannot mount: ${attachResult}`)\n  }\n\n  return await executeFinally(task(), () => detach(device))\n}\n\nexport async function detach(name: string) {\n  try {\n    await exec(\"hdiutil\", [\"detach\", \"-quiet\", name])\n  }\n  catch (e) {\n    await new Promise((resolve, reject) => {\n      setTimeout(() => {\n        exec(\"hdiutil\", [\"detach\", \"-force\", name])\n          .then(resolve)\n          .catch(reject)\n      }, 1000)\n    })\n  }\n}\n\nexport function computeBackgroundColor(rawValue: string) {\n  return require(\"parse-color\")(rawValue).hex\n}\n\nexport async function computeBackground(packager: PlatformPackager<any>): Promise<string> {\n  const resourceList = await packager.resourceList\n  if (resourceList.includes(\"background.tiff\")) {\n    return path.join(packager.buildResourcesDir, \"background.tiff\")\n  }\n  else if (resourceList.includes(\"background.png\")) {\n    return path.join(packager.buildResourcesDir, \"background.png\")\n  }\n  else {\n    return path.join(getDmgTemplatePath(), \"background.tiff\")\n  }\n}\n\nexport async function applyProperties(entries: any, env: any, asyncTaskManager: AsyncTaskManager, packager: PlatformPackager<any>) {\n  const dmgPropertiesFile = await packager.getTempFile(\"dmgProperties.pl\")\n  asyncTaskManager.addTask(outputFile(dmgPropertiesFile, (await readFile(path.join(getDmgTemplatePath(), \"dmgProperties.pl\"), \"utf-8\")).replace(\"$ENTRIES\", entries)))\n  await asyncTaskManager.awaitTasks()\n\n  await exec(\"/usr/bin/perl\", [dmgPropertiesFile], {\n    cwd: getDmgVendorPath(),\n    env\n  })\n}\n\nexport async function transformBackgroundFileIfNeed(file: string, tmpDir: TmpDir): Promise<string> {\n  if (file.endsWith(\".tiff\") || file.endsWith(\".TIFF\")) {\n    return file\n  }\n\n  const retinaFile = file.replace(/\\.([a-z]+)$/, \"@2x.$1\")\n  if (await exists(retinaFile)) {\n    const tiffFile = await tmpDir.getTempFile({suffix: \".tiff\"})\n    await exec(\"tiffutil\", [\"-cathidpicheck\", file, retinaFile, \"-out\", tiffFile])\n    return tiffFile\n  }\n\n  return file\n}\n\n/** @internal */\nexport function serializeString(data: string) {\n  return '  $\"' + data.match(/.{1,32}/g)!!.map(it => it.match(/.{1,4}/g)!!.join(\" \")).join('\"\\n  $\"') + '\"'\n}"],"sourceRoot":""}
